
stages:
  - build
  - jest_backend
  - eslint
  - sonarqube-check
  - deploy
###


build:
  tags:
    - runner_shell
  stage: build
  script: 
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  - docker build -t $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA  .
  - echo $CI_REGISTRY_IMAGE
  - docker push $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA

eslint:
  tags:
    - runner_shell
  stage: eslint
  image: $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA
  dependencies: 
    - build
  script:
    - docker ps -a
    - docker run --name backend -d $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA
    - docker ps -a
    - docker exec backend npm install -g eslint
    - docker exec backend eslint
    - docker stop backend
    - docker rm backend


jest_backend:
  tags:
    - runner_shell
  stage: jest_backend
  image: "$CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA"
  dependencies: 
    - build
  script: 
    - docker run --name backend -d $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA
    - docker ps -a
    - docker exec backend npm install jest
    - docker exec backend npx jest
    - docker stop backend
    - docker rm backend


sonarqube-check:
  tags:
    - runner_shell
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
     - sudo /opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner -X -Dsonar.projectKey=la_capsule_the_deployments_devils_backend_AY2iN-0vz4HOrQ42_SkR
     - sudo rm -rf .scannerwork/
  allow_failure: true
  only:
    - preprod
    - main

deploy-job:
  tags:
    - runner_shell
  stage: deploy
  script:
    - echo "start deployment when tests worked"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker tag $CI_REGISTRY_IMAGE:preprod_experimental_backend_$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:preprod_successfull_backend_$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:preprod_successfull_backend_$CI_COMMIT_SHORT_SHA
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_BACKEND_IP_ADDRESS "whoami"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_BACKEND_IP_ADDRESS "ls"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_BACKEND_IP_ADDRESS "sudo docker stop backend"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_BACKEND_IP_ADDRESS "sudo docker rm backend"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_BACKEND_IP_ADDRESS "sudo docker run -d -p 3001:3001 --name backend $CI_REGISTRY_IMAGE:preprod_successfull_backend_$CI_COMMIT_SHORT_SHA"
