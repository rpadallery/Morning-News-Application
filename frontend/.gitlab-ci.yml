stages:
  - build
  - cypress
  - eslint
  - jest
  - sonarqube-check
  - deploy
###

build:
  tags:
    - runner_shell
  stage: build
  script: 
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  - docker build -t $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA  .
  - echo $CI_REGISTRY_IMAGE
  - docker push $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA
  only:
    - preprod

cypress:
  image: node:16.20.2
  stage: cypress
  script:
    - whoami
    - ls
    - apt-get update
    - apt-get install npm -y
    - npm install && npm install next
    - npm run build
    - npm start &
    - apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y
    - npm install cypress
    - npx cypress info
    - npx cypress run --headless

eslint:
  tags:
    - runner_shell
  stage: eslint
  image: $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA
  dependencies: 
    - build
  script:
    - docker ps -a
    - docker run --name frontend -d $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA
    - docker ps -a
    - docker exec frontend npm install -g eslint
    - docker exec frontend eslint
    - docker stop frontend
    - docker rm frontend
  only:
    - preprod

jest:
  tags:
    - runner_shell
  stage: jest
  image: $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA
  dependencies: 
    - build
  script:
    - docker ps -a
    - docker run --name frontend -d $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA
    - docker ps -a
    - docker exec frontend npm install jest
    - docker exec frontend npm install redux-mock-store
    - docker exec frontend npx jest
    - docker stop frontend 
    - docker rm frontend
  only:
    - preprod

sonarqube-check:
  tags:
    - runner_shell
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
     - sudo /opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner -X -Dsonar.projectKey=la_capsule_the_deployments_devils_frontend_AY2iyrsEz4HOrQ42_Slg
     - sudo rm -rf .scannerwork/
  allow_failure: true
  only:
    - preprod
    - main

deploy-job:
  tags:
    - runner_shell
  stage: deploy
  script:
    - echo "start deployment when tests worked"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker tag $CI_REGISTRY_IMAGE:preprod_experimental_$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:preprod_successfull_$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:preprod_successfull_$CI_COMMIT_SHORT_SHA
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_FRONTEND_IPADDRESS "whoami"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_FRONTEND_IPADDRESS "ls"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_FRONTEND_IPADDRESS "sudo docker stop frontend"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_FRONTEND_IPADDRESS "sudo docker rm frontend"
    - ssh -i /home/admin/Deployment-devils-aws $SSH_USER@$AWS_PREPROD_FRONTEND_IPADDRESS "sudo docker run -d -p 3000:3000 --name frontend $CI_REGISTRY_IMAGE:preprod_successfull_$CI_COMMIT_SHORT_SHA"
  only:
    - preprod